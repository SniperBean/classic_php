<?php
echo "<h2>Handling Errors</h2>";
echo "<pre>Sometimes your application will not run as it supposed to do, resulting in an error.
There are a number of reasons that may cause errors, for example:
<li>The Web server might run out of disk space</li>
<li>A user might have entered an invalid value in a form field</li>
<li>The file or database record that you were trying to access may not exist</li>
<li>The application might not have permission to write to a file on the disk</li>
<li>A service that the application needs to access might be temporarily unavailable</li>
</pre>";

echo "<h2>Understanding Error Levels</h2>";
echo "<pre>Usually, when there's a problem that prevents a script from running properly, the PHP engine triggers an error.
Each error is represented by an integer value and an associated constant.
The following table list some of the common error levels:

<table>
                        <tbody><tr>
                            <th>Error Level</th>
                            <th>Value</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td><code>E_ERROR</code></td>
                            <td><code>1</code></td>
                            <td>A fatal run-time error, that can't be recovered from. The execution of the script is stopped immediately.</td>
                        </tr>
                        <tr>
                            <td><code>E_WARNING</code></td>
                            <td><code>2</code></td>
                            <td>A run-time warning. It is non-fatal and most errors tend to fall into this category. The execution of the script is not stopped.</td>
                        </tr>
                        <tr>
                            <td><code>E_NOTICE</code></td>
                            <td><code>8</code></td>
                            <td>A run-time notice. Indicate that the script encountered something that could possibly an error, although the situation could also occur when running a script normally.</td>
                        </tr>
                        <tr>
                            <td><code>E_USER_ERROR</code></td>
                            <td><code>256</code></td>
                            <td>A fatal user-generated error message. This is like an <code>E_ERROR</code>, except it is generated by the PHP script using the function <code>trigger_error()</code> rather than the PHP engine.</td>
                        </tr>
                        <tr>
                            <td><code>E_USER_WARNING</code></td>
                            <td><code>512</code></td>
                            <td>A non-fatal user-generated warning message. This is like an <code>E_WARNING</code>, except it is generated by the PHP script using the function <code>trigger_error()</code> rather than the PHP. engine</td>
                        </tr>
                        <tr>
                            <td><code>E_USER_NOTICE</code></td>
                            <td><code>1024</code></td>
                            <td>A user-generated notice message. This is like an <code>E_NOTICE</code>, except it is generated by the PHP script using the function <code>trigger_error()</code> rather than the PHP engine.</td>
                        </tr>
                        <tr>
                            <td><code>E_STRICT</code></td>
                            <td><code>2048</code></td>
                            <td>Not strictly an error, but triggered whenever PHP encounters code that could lead to problems or forward incompatibilities</td>
                        </tr>
                        <tr>
                            <td><code>E_ALL</code></td>
                            <td><code>8191</code></td>
                            <td>All errors and warnings, except of <code>E_STRICT</code> prior to PHP 5.4.0.</td>
                        </tr>
                    </tbody></table>
</pre>";

echo "<h2>Basic Error Handling Using the die() Function</h2>";
echo "<pre>
ex 1:

if(file_exists(\"sample.txt\")){
	\$file = fopen(\"sample.txt\",\"r\")
} else{
	die(\"Error: The file you are trying to access doesn't exist.\"
}	
</pre>";

if(file_exists("sample.txt")){
	$file = fopen("sample", "r");
} else
{
	//die("Error: The file you are trying to access doesn't exist.");
	//if die() function has been executed, the code after die() function won't be executed.
	echo "Error: The file you are trying to access doesn't exist.";
}
echo "<h2>Creating a Custom Error Handler</h2>";

echo "<pre>
You can create your own error handler function to deal with the run-time error generated by PHP engine.
The custom error handler provides you greater flexibility what to do with the error, it might display a message to the user, log the problem and carry on, exit the execution of the script or ignore the error altogether.

The custom error handler function must be able to handle at least two parameters, however it can optionally accept an additional three parameters (errfile, errline and errcontext), as described below:
<table>
                        <tbody><tr>
                            <th>Parameter</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td><strong>Required</strong> — The following parameters are required</td>
                        </tr>
                        <tr>
                            <td>errno</td>
                            <td>Specifies the level of the error, as an integer. This corresponds to the appropriate error level constant ( <code>E_ERROR</code>, <code>E_WARNING</code>, and so on)</td>
                        </tr>
                        <tr>
                            <td>errstr</td>
                            <td>Specifies the error message as a string</td>
                        </tr>
                        <tr>
                            <td><strong>Optional</strong> — The following parameters are optional</td>
                        </tr>
                        <tr>
                            <td>errfile</td>
                            <td>Specifies the filename of the script file in which the error occurred, as a string</td>
                        </tr>
                        <tr>
                            <td>errline</td>
                            <td>Specifies the line number on which the error occurred, as a string</td>
                        </tr>
                        <tr>
                            <td>errcontext</td>
                            <td>Specifies an array containing all the variables and their values that existed at the time the error occurred. Useful for debugging</td>
                        </tr>
                    </tbody></table>

ex 2:

function customError(\$errno, \$errstr ){
	echo \"< b>Error:< /b> [\$errno] \$errstr\";
}

set_error_handler(\"customError\");
echo (\$test);
</pre>";

function customError($errno, $errstr){
	echo "<b>Error:</b>[$errno] $errstr";
}

set_error_handler("customError");
echo($test);

echo "<h2>Error Logging</h2>";
echo "<pre>You can also logs details of the error to the file
ex 3:

function calcDivision(\$dividend, \$divisor){
	if(\$divisor == 0)	{
		trigger_error(\"calcDivision(): The divisor cannot be zero\", E_USER_WARNING);
		return false;
	} else{
		return(\$dividend / \$divisor);	
	}
}

function detailCustomError(\$errno, \$errstr, \$errfile, \$errline, \$errcontext){
	\$message = date(\"Y-m-d H:i:s - \");
	\$message .= \"Error: [\" .  \$errno . \"], \" . \"\$errstr in \$errfile on line \$errline, \";
	\$message .= \"Variables:\" . print_r(\$errcpmtext, true) . \"\\r\\n\";
	
	<strong>error_log(\$message, 3, \"logs/app_errors.log\");</strong>
	die(\"There was a problem, please try again\");
}

set_error_handler(\"detailCustomError\");
echo calcDivision(10, 0);

</pre>";

function calcDivision($dividend, $divisor){
	if($divisor == 0)	{
		trigger_error("calcDivision(): The divisor cannot be zero", E_USER_WARNING);
		return false;
	} else{
		return($dividend / $divisor);	
	}
}

function detailCustomError($errno, $errstr, $errfile, $errline, $errcontext){
	$message = date("Y-m-d H:i:s - ");
	$message .= "Error: [" .  $errno . "], " . "$errstr in $errfile on line $errline,";
	$message .= "Variables:" . print_r($errcpmtext, true) . "\r\n";
	
	error_log($message, 3, "logs/app_errors.log");
	//die("There was a problem, please try again");
	echo "There was a problem, please try again";
}

set_error_handler("detailCustomError");
echo calcDivision(10, 0);

echo "<h2>Send Error Messages by E-Mail</h2>";
echo "<pre>

ex 4:

function calcDivision(\$dividend, \$divisor){
	if(\$divisor == 0)	{
		trigger_error(\"calcDivision(): The divisor cannot be zero\", E_USER_WARNING);
		return false;
	} else{
		return(\$dividend / \$divisor);	
	}
}

function detailCustomError(\$errno, \$errstr, \$errfile, \$errline, \$errcontext){
	\$message = date(\"Y-m-d H:i:s - \");
	\$message .= \"Error: [\" .  \$errno . \"], \" . \"\$errstr in \$errfile on line \$errline, \";
	\$message .= \"Variables:\" . print_r(\$errcpmtext, true) . \"\\r\\n\";
	
	<strong>error_log(\$message, 1, \"webmaster@example.com\");</strong>
	die(\"There was a problem, please try again\");
}

set_error_handler(\"detailCustomError\");
echo calcDivision(10, 0);


</pre>";

echo "<h2>Trigger an Error</h2>";
echo "<pre>
You can also trigger errors yourself.
To trigger_error() function, passing in the error message that you want to generate:
trigger_error(\"There was a problem\");

</pre>";

function myCalcDivision($dividend, $divisor){
	if($divisor == 0){
		trigger_error("The divisor cannot be zero", E_USER_WARNING);
		return false;	
	} else{
		return($dividend/$divisor);	
	}
}

echo myCalcDivision(10, 0);
?>



